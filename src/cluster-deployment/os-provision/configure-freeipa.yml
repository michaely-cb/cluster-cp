- name: "Prepare for FreeIPA configuration and installation"
  hosts: all
  vars:
    backupdir: "/root/backup/freeipa/{{ ansible_date_time.epoch }}"
  tasks:
    - name: "Print Backup location"
      ansible.builtin.debug: msg="{{ backupdir }}"
    - name: "Backup files"
      ansible.builtin.shell: |
        if [ -f {{ item }} ]; then
          mkdir -p {{ backupdir }}/$(dirname {{ item }})
          cp {{ item }} {{ backupdir }}/$(dirname {{ item }})/
        fi
      with_items:
        - /etc/nsswitch.conf
        - /etc/authselect/nsswitch.conf
        - /etc/authselect/user-nsswitch.conf
        - /etc/idmapd.conf
        - /etc/yp.conf

- name: "Install freeipa-client and ipa-admintools"
  hosts: all
  tasks:
    - name: Install freeipa-client"
      ansible.builtin.package:
        name: "ipa-client-4.9.12"
        state: present

- name: "Configure ipa with server"
  hosts: all
  environment:
    MASTER_PASS: "{{ master_password }}"
  tasks:
    - name: "Get id"
      ansible.builtin.command: "id {{ master_username }}"
      register: idname
      ignore_errors: yes
      no_log: true
      failed_when: false
    - name: "Configure ipa-client"
      # --force-join allows re-enrolling a server that was RMA'd and the new chassis used the same hostname
      # --hostname is required if servers' hostnames are not a FQDN
      ansible.builtin.shell: |
        /usr/sbin/ipa-client-install --unattended \
          --nisdomain={{ ipa_master_nis_domain }} \
          --server={{ ipa_master_server }} \
          --domain={{ ipa_master_domain }} \
          --hostname={{ ansible_hostname }}.{{ domain }} \
          --force-join \
          --verbose \
          -p {{ master_username }} \
          -w ${MASTER_PASS}
      when: idname.stdout == ""

    - name: Restore hostname
      command: hostnamectl set-hostname "{{ ansible_hostname }}"

- name: "Setup nsswitch"
  hosts: all
  tasks:
    - name: "Update /etc/authselect/nsswitch.conf"
      ansible.builtin.copy:
        src: "templates/nsswitch.conf"
        dest: "/etc/authselect/user-nsswitch.conf"
    - name: "Select sssd"
      ansible.builtin.shell: "authselect select sssd --force"
    - name: "Apply-changes"
      ansible.builtin.shell: "authselect apply-changes"
    - name: "Enable with-sudo"
      ansible.builtin.shell: "authselect enable-feature with-sudo"
    - name: "Enable with-custom-passwd"
      ansible.builtin.shell: "authselect enable-feature with-custom-passwd"
    - name: "Enable with-custom-group"
      ansible.builtin.shell: "authselect enable-feature with-custom-group"

- name: "Validate Install"
  hosts: all
  tasks:
    - name: "Validate via id command"
      ansible.builtin.shell: "id {{ master_username }}"
    - name: "Validate nisdomain set correctly"
      ansible.builtin.shell: nisdomainname
      register: nisdomain
    - name: "Check nisdomainname"
      ansible.builtin.assert:
        that:
          - nisdomain.stdout == ipa_master_nis_domain
        fail_msg: "nisdomainname is not set to {{ ipa_master_nis_domain }}, got {{ nisdomain.stdout }}. You may need to manually update /etc/sysconfig/network"
