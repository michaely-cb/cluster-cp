/*
Copyright 2022 Cerebras Systems, Inc..

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "cerebras.com/job-operator/apis/resourcelock/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceLockLister helps list ResourceLocks.
// All objects returned here must be treated as read-only.
type ResourceLockLister interface {
	// List lists all ResourceLocks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceLock, err error)
	// ResourceLocks returns an object that can list and get ResourceLocks.
	ResourceLocks(namespace string) ResourceLockNamespaceLister
	ResourceLockListerExpansion
}

// resourceLockLister implements the ResourceLockLister interface.
type resourceLockLister struct {
	indexer cache.Indexer
}

// NewResourceLockLister returns a new ResourceLockLister.
func NewResourceLockLister(indexer cache.Indexer) ResourceLockLister {
	return &resourceLockLister{indexer: indexer}
}

// List lists all ResourceLocks in the indexer.
func (s *resourceLockLister) List(selector labels.Selector) (ret []*v1.ResourceLock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceLock))
	})
	return ret, err
}

// ResourceLocks returns an object that can list and get ResourceLocks.
func (s *resourceLockLister) ResourceLocks(namespace string) ResourceLockNamespaceLister {
	return resourceLockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceLockNamespaceLister helps list and get ResourceLocks.
// All objects returned here must be treated as read-only.
type ResourceLockNamespaceLister interface {
	// List lists all ResourceLocks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceLock, err error)
	// Get retrieves the ResourceLock from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ResourceLock, error)
	ResourceLockNamespaceListerExpansion
}

// resourceLockNamespaceLister implements the ResourceLockNamespaceLister
// interface.
type resourceLockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceLocks in the indexer for a given namespace.
func (s resourceLockNamespaceLister) List(selector labels.Selector) (ret []*v1.ResourceLock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceLock))
	})
	return ret, err
}

// Get retrieves the ResourceLock from the indexer for a given namespace and name.
func (s resourceLockNamespaceLister) Get(name string) (*v1.ResourceLock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("resourcelock"), name)
	}
	return obj.(*v1.ResourceLock), nil
}
