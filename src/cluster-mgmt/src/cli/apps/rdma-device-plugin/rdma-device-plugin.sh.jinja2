#!/usr/bin/env bash

SCRIPT_PATH=$(dirname "$0")
cd "$SCRIPT_PATH"
source "../pkg-common.sh"

set -e

# If installed from package, detect if multus is running first.
if ! kubectl get daemonset -n kube-system multus-multus-ds; then
    echo "Multus not installed, skipping RDMA plugin install"
    exit 0
fi

if [ -d "/kind" ] ; then
    echo "Running in docker env, skipping RDMA plugin install"
    exit 0
fi


# If installed as part of multus deploy, then the list already exists. Don't recreate it.
if [ ! -e ${UNREACHABLE_LIST} ]; then
    get_unreachable_nodes
fi

validate_rdma_plugin() {
    # delete old test daemonset and unlabel to ensure fresh test pods are
    # inspected in new test round.
    kubectl delete -f rdma-device-plugin-test-daemonset.yaml &>/dev/null || true
    kubectl label -n kube-system pod -lname=rdma-device-plugin-test name-

    # test that we have the relevant device file on all non control-plane nodes
    echo "testing RDMA device plugin install on all nodes"
    # TODO: instead of creating a new file, add the extra nodeselector and toleration
    #       using yq?
    if is_incremental_deploy; then
      kubectl apply -f rdma-device-plugin-test-daemonset-incremental.yaml
    else
      kubectl apply -f rdma-device-plugin-test-daemonset.yaml
    fi

    # todo: consolidate after all BR usage migrated to multus
    # this file contains 2 DS with the same label - wait for both (second one should return immediately)
    kubectl rollout status daemonset -n kube-system rdma-device-plugin-test-not-br --timeout=300s
    kubectl rollout status daemonset -n kube-system rdma-device-plugin-test-br --timeout=300s

    # this tests pods in both DSs
    # TODO - can we move the test into the installer DS, that way we each node can test itself
    #        as it becomes ready and then report back somehow?
    for pod in $(kubectl get pods -n kube-system -lname=rdma-device-plugin-test -o custom-columns=name:metadata.name --no-headers); do
        if ! kubectl exec -n kube-system "$pod" -- ls -l /dev/infiniband/rdma_cm; then
            echo "Missing Infiniband device file on $pod - RoCE deployment failure" >&2
            # test daemonset will be left in place for debugging
            return 1
        fi
    done
    kubectl delete -f rdma-device-plugin-test-daemonset.yaml
}

if ! is_incremental_deploy; then
  kubectl apply -f rdma-device-plugin-configmap.yaml
  kubectl apply -f rdma-device-plugin-daemonset.yaml
  await_ds_ready kube-system rdma-device-plugin 60 unreachable_ok
fi

mkdir -p /etc/systemd/system/containerd.service.d
cp roce-limitmemlock-infinity.conf /etc/systemd/system/containerd.service.d/

installer_rollout_wait_or_warn installers rdma-device-plugin-installer ./rdma-device-plugin-installer.sh 180 unreachable_ok

validate_rdma_plugin
