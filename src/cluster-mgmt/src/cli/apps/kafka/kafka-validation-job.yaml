apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-validation-scripts
  namespace: kafka
data:
  utils.sh: |
    #!/bin/bash
    set -eo pipefail

    function check_svc_readiness() {
      service=$1
      port=$2

      # Maximum attempts to try DNS resolution
      max_attempts=5

      # Interval between attempts
      sleep_interval=3

      # Counter
      count=1

      while true; do
        if timeout 1 bash -c "echo> /dev/tcp/${service}/${port}" &> /dev/null; then
          echo "${service} at port ${port} is available"
          break
        else
          if [ $count -ge ${max_attempts} ]; then
            echo "${service} at port ${port} is not available after ${max_attempts} attempts"
            exit 1
          fi
          echo "${service} at port ${port} is not available - retrying in $sleep_interval seconds..."
          count=$((count + 1))
          sleep $sleep_interval
        fi
      done
    }

  init.sh: |
    #!/bin/bash
    set -eo pipefail

    KEYSTORE_CHAIN="/kafka-client-config/keystore.chain"

    for auth_dir in /kafka-auth-*; do
      if [ ! -d "${auth_dir}" ]; then
        echo 'Skipping ${auth_dir} as it is not a directory.'
        continue
      fi

      if [ ! -f ${KEYSTORE_CHAIN} ]; then
        cp ${auth_dir}/tls.crt /kafka-client-config${auth_dir}-tls.crt
        openssl pkcs8 -topk8 -nocrypt -in ${auth_dir}/tls.key > /kafka-client-config${auth_dir}-tls.key

        touch ${KEYSTORE_CHAIN}
        cat /kafka-client-config${auth_dir}-tls.key /kafka-client-config${auth_dir}-tls.crt >> ${KEYSTORE_CHAIN}
      fi

      if [ ! -f /kafka-client-config/ca.crt ]; then
        cp ${auth_dir}/ca.crt /kafka-client-config/ca.crt
      fi
    done

    CLIENT_PROPERTIES="/kafka-client-config/client.properties"
    touch ${CLIENT_PROPERTIES}
    echo "security.protocol=SSL" >> ${CLIENT_PROPERTIES}
    echo "ssl.keystore.type=PEM" >> ${CLIENT_PROPERTIES}
    echo "ssl.keystore.location=/kafka-client-config/keystore.chain" >> ${CLIENT_PROPERTIES}
    echo "ssl.truststore.type=PEM" >> ${CLIENT_PROPERTIES}
    echo "ssl.truststore.location=/kafka-client-config/ca.crt" >> ${CLIENT_PROPERTIES}

  validate.sh: |
    #!/bin/bash
    set -eo pipefail

    source /scripts/utils.sh

    port=9092
    bootstrap_server="kafka.kafka.svc.cluster.local"
    check_svc_readiness ${bootstrap_server} ${port}

    validated_broker_eps=()
    for ((i=0; i<$num_kafka_nodes; i++)); do
      svc="kafka-$i.kafka-headless.kafka.svc.cluster.local"
      check_svc_readiness ${svc} ${port}
      validated_broker_eps+=("${svc}:${port}")
    done

    broker_list=$(printf "%s," "${validated_broker_eps[@]}")
    broker_list=${broker_list%,}

    # Start consumer in the background with a timeout
    # Assumes GNU coreutils (timeout command availability)
    timeout --preserve-status 30 kafka-console-consumer.sh \
      --consumer.config /kafka-client-config/client.properties \
      --bootstrap-server ${svc}:${port} --topic deployment --max-messages 1 &

    consumer_pid=$!

    # Give the consumer a chance to start
    sleep 5

    # Start producer
    now=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    echo '{"app": "kafka", "version": "3.5.0-debian-11-r1", "validatedAt": "'"${now}"'"}' | \
      kafka-console-producer.sh --producer.config /kafka-client-config/client.properties \
      --broker-list ${broker_list} --topic deployment

    # Wait for consumer to finish or kill it if timeout exceeded
    wait ${consumer_pid} || true

---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-validation
  namespace: kafka
spec:
  # Keep failed jobs around for one day
  ttlSecondsAfterFinished: 86400
  backoffLimit: 3
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: main
        image: registry.local/bitnami-kafka:3.5.0-debian-11-r1
        command: ["bash", "/scripts/validate.sh"]
        volumeMounts:
        - name: kafka-client-config-volume
          mountPath: /kafka-client-config
        - name: kafka-scripts-volume
          mountPath: /scripts
      initContainers:
      - name: init-container
        image: registry.local/bitnami-kafka:3.5.0-debian-11-r1
        command: ["bash", "/scripts/init.sh"]
        volumeMounts:
        - name: kafka-scripts-volume
          mountPath: /scripts
        - name: kafka-secret-volume-0
          mountPath: /kafka-auth-0
        - name: kafka-client-config-volume
          mountPath: /kafka-client-config
      volumes:
      - name: kafka-scripts-volume
        configMap:
          name: kafka-validation-scripts
      - name: kafka-client-config-volume
        emptyDir: {}
      - name: kafka-secret-volume-0
        secret:
          secretName: kafka-0-tls
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
