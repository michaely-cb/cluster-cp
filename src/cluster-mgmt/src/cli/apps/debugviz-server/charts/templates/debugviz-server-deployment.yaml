apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.system_namespace }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Values.name }}
        image: {{ .Values.image }}
        imagePullPolicy: IfNotPresent
        command:
        # debug team owns the debugviz image
        # https://github.com/Cerebras/monolith/blob/9bfe7836b47a36ad0a7a66f0c07776fa3bf3658d/src/hwdebug_common/debugviz/debugviz.py
        - debugviz.py
        - --webdir
        - /root/app
        - --port
        - "{{ .Values.port }}"
        ports:
        - containerPort: {{ .Values.port }}
          protocol: TCP
        volumeMounts:
        {{- with .Values.debugMount }}
        {{ toYaml (list .) | nindent 8 }}
        {{- end }}
        {{- with .Values.nfsWorkdirMount }}
        {{ toYaml (list .) | nindent 8 }}
        {{- end }}
        resources:
          limits:
            memory: 4Gi
          requests:
            cpu: "200m"
        startupProbe:
          tcpSocket:
            port: {{ .Values.port }}
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 6
        livenessProbe:
          tcpSocket:
            port: {{ .Values.port }}
          periodSeconds: 10
        workingDir: {{ .Values.path }}
      - name: rsync-container
        image: registry.local/alpine-containerd:latest
        imagePullPolicy: IfNotPresent
        command: ["sleep", "infinity"]
        volumeMounts:
        {{- with .Values.debugMount }}
        {{ toYaml (list .) | nindent 8 }}
        {{- end }}
        {{- with .Values.nfsWorkdirMount }}
        {{ toYaml (list .) | nindent 8 }}
        {{- end }}
        resources:
          limits:
            # One small export uses 50Mi at a time.
            # Conservatively etting memory limit to 500Mi for larger parallel exports.
            # TODO: Revisit when we know more about the actual usage.
            memory: 500Mi
          requests:
            cpu: "100m"
        workingDir: {{ .Values.path }}
      # TODO: add logs volume and corresponding rotation when it's available
      volumes:
      {{- with .Values.debugVolume }}
      {{ toYaml (list .) | nindent 6 }}
      {{- end }}
      {{- with .Values.nfsWorkdirVolume }}
      {{ toYaml (list .) | nindent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
